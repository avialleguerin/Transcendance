import { create_environment_view3, create_game, destroy_game } from "../init_game.js";
import { loadScoreModel, destroy_score } from "../score.js";
import { createBall, destroy_ball } from "../ball.js";
import { init_players_tournament } from "./init_player_tournament.js";
import { reset_player_position } from "../player.js";
import { init_game } from "../init_game.js";
import { init_ball } from "../ball.js";
let ball = null;
let player_1_tournament, player_2_tournament;
let is_init = false;
export async function init_game_tournament(scene) {
    if (!is_init) {
        create_game(scene);
        ({ player_1_tournament, player_2_tournament } = init_players_tournament(scene));
        if (!player_1_tournament || !player_2_tournament) {
            console.error("Erreur lors de l'initialisation des joueurs");
            return null;
        }
        ball = await createBall(scene).catch(error => {
            console.error(error);
            return null;
        });
        if (!ball) {
            console.error("Erreur lors de la création de la balle");
            return null;
        }
        if (ball) {
            console.log("Balle chargée avec position :", ball.position);
        }
        loadScoreModel(0, "left", true);
        loadScoreModel(0, "right", false);
        is_init = true;
        return { player_1_tournament, player_2_tournament, ball };
    }
    else {
        already_init();
        reset_player_position(player_1_tournament, player_2_tournament);
        return { player_1_tournament, player_2_tournament, ball };
    }
}
function already_init() {
    enable_all_by_metadata(scene, "isPlayerRepere");
    enable_all_by_metadata(scene, "isPlayer_paddle");
    enable_all_by_metadata(scene, "isPlayer");
    init_game(scene);
    init_ball(ball);
}
function enable_all_by_metadata(scene, metadataKey) {
    scene.meshes
        .filter(mesh => mesh.metadata && mesh.metadata[metadataKey])
        .forEach(mesh => mesh.setEnabled(true));
}
export async function destroy_game_solo_tournament(scene) {
    destroy_all_by_metadata(scene, "isPlayerRepere");
    destroy_all_by_metadata(scene, "isPlayer_paddle");
    destroy_all_by_metadata(scene, "isPlayer");
    destroy_game(scene);
    destroy_ball(ball);
    destroy_score();
}
function destroy_all_by_metadata(scene, metadataKey) {
    scene.meshes
        .filter(mesh => mesh.metadata && mesh.metadata[metadataKey])
        .forEach(mesh => mesh.setEnabled(false));
}
export function start_tournament_game() {
    console.log('Start tournament game');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91cm5hbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3B1YmxpYy9zcmNzL2dhbWUvZ2FtZXBsYXkvdG91cm5hbWVudC90b3VybmFtZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxXQUFXLEVBQUcsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDdEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDNUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXZDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztBQUNoQixJQUFJLG1CQUFtQixFQUFFLG1CQUFtQixDQUFDO0FBQzdDLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztBQUVwQixNQUFNLENBQUMsS0FBSyxVQUFVLG9CQUFvQixDQUFDLEtBQUs7SUFFNUMsSUFBSSxDQUFDLE9BQU8sRUFDWixDQUFDO1FBQ0csV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRW5CLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRSxHQUFHLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFaEYsSUFBSSxDQUFDLG1CQUFtQixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUMvQyxPQUFPLENBQUMsS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7WUFDN0QsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQUVE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ZGVzdHJveV9nYW1lfSBmcm9tIFwiLi4vaW5pdF9nYW1lLmpzXCI7XG5pbXBvcnQgeyBsb2FkU2NvcmVNb2RlbCwgZGVzdHJveV9zY29yZSB9IGZyb20gXCIuLi9zY29yZS5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlQmFsbCwgZGVzdHJveV9iYWxsIH0gZnJvbSBcIi4uL2JhbGwuanNcIjtcbmltcG9ydCB7IGluaXRfcGxheWVyc190b3VybmFtZW50IH0gZnJvbSBcIi4vaW5pdF9wbGF5ZXJfdG91cm5hbWVudC5qc1wiO1xuaW1wb3J0IHsgcmVzZXRfcGxheWVyX3Bvc2l0aW9uIH0gZnJvbSBcIi4uL3BsYXllci5qc1wiO1xuaW1wb3J0IHsgaW5pdF9nYW1lIH0gZnJvbSBcIi4uL2luaXRfZ2FtZS5qc1wiO1xuaW1wb3J0IHsgaW5pdF9iYWxsIH0gZnJvbSBcIi4uL2JhbGwuanNcIjtcblxubGV0IGJhbGwgPSBudWxsO1xubGV0IHBsYXllcl8xX3RvdXJuYW1lbnQsIHBsYXllcl8yX3RvdXJuYW1lbnQ7XG5sZXQgaXNfaW5pdCA9IGZhbHNlO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdF9nYW1lX3RvdXJuYW1lbnQoc2NlbmUpXG57XG4gICAgaWYgKCFpc19pbml0KVxuICAgIHtcbiAgICAgICAgY3JlYXRlX2dhbWUoc2NlbmUpO1xuXG4gICAgICAgICh7IHBsYXllcl8xX3RvdXJuYW1lbnQsIHBsYXllcl8yX3RvdXJuYW1lbnQgfSA9IGluaXRfcGxheWVyc190b3VybmFtZW50KHNjZW5lKSk7XG4gICAgXG4gICAgICAgIGlmICghcGxheWVyXzFfdG91cm5hbWVudCB8fCAhcGxheWVyXzJfdG91cm5hbWVudCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycmV1ciBsb3JzIGRlIGwnaW5pdGlhbGlzYXRpb24gZGVzIGpvdWV1cnNcIik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBiYWxsID0gYXdhaXQgY3JlYXRlQmFsbChzY2VuZSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgXG4gICAgICAgIGlmICghYmFsbCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycmV1ciBsb3JzIGRlIGxhIGNyw6lhdGlvbiBkZSBsYSBiYWxsZVwiKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYWxsKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkJhbGxlIGNoYXJnw6llIGF2ZWMgcG9zaXRpb24gOlwiLCBiYWxsLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBsb2FkU2NvcmVNb2RlbCgwLCBcImxlZnRcIiwgdHJ1ZSk7XG4gICAgICAgIGxvYWRTY29yZU1vZGVsKDAsIFwicmlnaHRcIiwgZmFsc2UpO1xuICAgICAgICBpc19pbml0ID0gdHJ1ZTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7IHBsYXllcl8xX3RvdXJuYW1lbnQsIHBsYXllcl8yX3RvdXJuYW1lbnQsIGJhbGwgfTtcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgYWxyZWFkeV9pbml0KCk7XG4gICAgICAgIHJlc2V0X3BsYXllcl9wb3NpdGlvbihwbGF5ZXJfMV90b3VybmFtZW50LCBwbGF5ZXJfMl90b3VybmFtZW50KTtcbiAgICAgICAgcmV0dXJuIHsgcGxheWVyXzFfdG91cm5hbWVudCwgcGxheWVyXzJfdG91cm5hbWVudCwgYmFsbCB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWxyZWFkeV9pbml0KClcbntcbiAgICBlbmFibGVfYWxsX2J5X21ldGFkYXRhKHNjZW5lLCBcImlzUGxheWVyUmVwZXJlXCIpO1xuICAgIGVuYWJsZV9hbGxfYnlfbWV0YWRhdGEoc2NlbmUsIFwiaXNQbGF5ZXJfcGFkZGxlXCIpO1xuICAgIGVuYWJsZV9hbGxfYnlfbWV0YWRhdGEoc2NlbmUsIFwiaXNQbGF5ZXJcIik7XG4gICAgaW5pdF9nYW1lKHNjZW5lKTtcbiAgICBpbml0X2JhbGwoYmFsbCk7XG59XG5cbmZ1bmN0aW9uIGVuYWJsZV9hbGxfYnlfbWV0YWRhdGEoc2NlbmUsIG1ldGFkYXRhS2V5KSB7XG4gICAgc2NlbmUubWVzaGVzXG4gICAgICAgIC5maWx0ZXIobWVzaCA9PiBtZXNoLm1ldGFkYXRhICYmIG1lc2gubWV0YWRhdGFbbWV0YWRhdGFLZXldKVxuICAgICAgICAuZm9yRWFjaChtZXNoID0+IG1lc2guc2V0RW5hYmxlZCh0cnVlKSk7XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlc3Ryb3lfZ2FtZV9zb2xvX3RvdXJuYW1lbnQoc2NlbmUpXG57XG4gICAgZGVzdHJveV9hbGxfYnlfbWV0YWRhdGEoc2NlbmUsIFwiaXNQbGF5ZXJSZXBlcmVcIik7XG4gICAgZGVzdHJveV9hbGxfYnlfbWV0YWRhdGEoc2NlbmUsIFwiaXNQbGF5ZXJfcGFkZGxlXCIpO1xuICAgIGRlc3Ryb3lfYWxsX2J5X21ldGFkYXRhKHNjZW5lLCBcImlzUGxheWVyXCIpO1xuICAgIGRlc3Ryb3lfZ2FtZShzY2VuZSk7XG4gICAgZGVzdHJveV9iYWxsKGJhbGwpO1xuICAgIGRlc3Ryb3lfc2NvcmUoKTtcbn1cblxuZnVuY3Rpb24gZGVzdHJveV9hbGxfYnlfbWV0YWRhdGEoc2NlbmUsIG1ldGFkYXRhS2V5KSB7XG5cdHNjZW5lLm1lc2hlc1xuXHRcdC5maWx0ZXIobWVzaCA9PiBtZXNoLm1ldGFkYXRhICYmIG1lc2gubWV0YWRhdGFbbWV0YWRhdGFLZXldKVxuXHRcdC5mb3JFYWNoKG1lc2ggPT4gbWVzaC5zZXRFbmFibGVkKGZhbHNlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydF90b3VybmFtZW50X2dhbWUoKVxue1xuXHRjb25zb2xlLmxvZygnU3RhcnQgdG91cm5hbWVudCBnYW1lJyk7XG59XG5cblxuIl19