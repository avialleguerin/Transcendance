let nb_powerUP_teamPlayer1_2 = 0;
let nb_powerUP_teamPlayer3_4 = 0;
export function init_nb_powerUP_grenadeFlash_team_player(number) {
    nb_powerUP_teamPlayer1_2 = number;
    nb_powerUP_teamPlayer3_4 = number;
    console.log("Nombre de grenades flash:", nb_powerUP_teamPlayer1_2);
}
export function reset_powerUP_grenadeTeam_player() {
    nb_powerUP_teamPlayer1_2 = 0;
    nb_powerUP_teamPlayer3_4 = 0;
}
function create_overlay() {
    const overlay = document.createElement("div");
    overlay.id = "grenade_flash";
    overlay.innerHTML = `
		<link rel="stylesheet" href="./static/js/css/grenade_flash.css">
		<div class="grenade-flash">
			<div class="flash"></div>
		</div>
	`;
    document.body.appendChild(overlay);
}
function remove_overlay() {
    const overlay = document.getElementById("grenade_flash");
    if (overlay) {
        overlay.style.opacity = '0';
        setTimeout(() => {
            if (overlay && overlay.parentNode) {
                document.body.removeChild(overlay);
            }
        }, 1000);
    }
}
let canUseFlashGrenade_1 = true;
let canUseFlashGrenade_2 = true;
export function grenade_flash_Team_player1_2() {
    if (nb_powerUP_teamPlayer1_2 > 0 && canUseFlashGrenade_1) {
        canUseFlashGrenade_1 = false;
        create_overlay();
        nb_powerUP_teamPlayer1_2--;
        setTimeout(() => {
            remove_overlay();
        }, 1000);
        setTimeout(() => {
            canUseFlashGrenade_1 = true;
            console.log("Grenade flash rechargée !");
        }, 15000);
    }
}
export function grenade_flash_Team_player3_4() {
    if (nb_powerUP_teamPlayer3_4 > 0 && canUseFlashGrenade_2) {
        canUseFlashGrenade_2 = false;
        create_overlay();
        nb_powerUP_teamPlayer3_4--;
        setTimeout(() => {
            remove_overlay();
        }, 1000);
        setTimeout(() => {
            canUseFlashGrenade_2 = true;
            console.log("Grenade flash rechargée !");
        }, 15000);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdF9wb3dlclVQX0dlcm5hZGVGbGFzaF9tdWx0aS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3B1YmxpYy9zcmNzL2dhbWUvZ2FtZXBsYXkvbXVsdGlwbGF5ZXIvMnYyX2dhbWUvaW5pdF9wb3dlclVQX0dlcm5hZGVGbGFzaF9tdWx0aS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLHdCQUF3QixHQUFHLENBQUMsQ0FBQztBQUNqQyxJQUFJLHdCQUF3QixHQUFHLENBQUMsQ0FBQztBQUVqQyxNQUFNLFVBQVUsd0NBQXdDLENBQUMsTUFBTTtJQUMzRCx3QkFBd0IsR0FBRyxNQUFNLENBQUM7SUFDbEMsd0JBQXdCLEdBQUcsTUFBTSxDQUFDO0lBRWxDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztBQUV2RSxDQUFDO0FBRUQsTUFBTSxVQUFVLGdDQUFnQztJQUUvQyx3QkFBd0IsR0FBRyxDQUFDLENBQUM7SUFDN0Isd0JBQXdCLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFFRCxTQUFTLGNBQWM7SUFDdEIsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxPQUFPLENBQUMsRUFBRSxHQUFHLGVBQWUsQ0FBQztJQUM3QixPQUFPLENBQUMsU0FBUyxHQUFHOzs7OztFQUtuQixDQUFDO0lBQ0YsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVELFNBQVMsY0FBYztJQUN0QixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3pELElBQUksT0FBTyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7UUFDNUIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNmLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztnQkFDbkMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDcEMsQ0FBQztRQUNGLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNWLENBQUM7QUFDRixDQUFDO0FBRUQsSUFBSSxvQkFBb0IsR0FBRyxJQUFJLENBQUM7QUFDaEMsSUFBSSxvQkFBb0IsR0FBRyxJQUFJLENBQUM7QUFFaEMsTUFBTSxVQUFVLDRCQUE0QjtJQUUzQyxJQUFJLHdCQUF3QixHQUFHLENBQUMsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO1FBQzFELG9CQUFvQixHQUFHLEtBQUssQ0FBQztRQUU3QixjQUFjLEVBQUUsQ0FBQztRQUNqQix3QkFBd0IsRUFBRSxDQUFDO1FBRTNCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZixjQUFjLEVBQUUsQ0FBQztRQUNsQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFVCxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2Ysb0JBQW9CLEdBQUcsSUFBSSxDQUFDO1lBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUMxQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDWCxDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sVUFBVSw0QkFBNEI7SUFFM0MsSUFBSSx3QkFBd0IsR0FBRyxDQUFDLElBQUksb0JBQW9CLEVBQUUsQ0FBQztRQUMxRCxvQkFBb0IsR0FBRyxLQUFLLENBQUM7UUFFN0IsY0FBYyxFQUFFLENBQUM7UUFDakIsd0JBQXdCLEVBQUUsQ0FBQztRQUUzQixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2YsY0FBYyxFQUFFLENBQUM7UUFDbEIsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRVQsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNmLG9CQUFvQixHQUFHLElBQUksQ0FBQztZQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDMUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ1gsQ0FBQztBQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgbmJfcG93ZXJVUF90ZWFtUGxheWVyMV8yID0gMDtcbmxldCBuYl9wb3dlclVQX3RlYW1QbGF5ZXIzXzQgPSAwO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9uYl9wb3dlclVQX2dyZW5hZGVGbGFzaF90ZWFtX3BsYXllcihudW1iZXIpIHtcbiAgICBuYl9wb3dlclVQX3RlYW1QbGF5ZXIxXzIgPSBudW1iZXI7XG4gICAgbmJfcG93ZXJVUF90ZWFtUGxheWVyM180ID0gbnVtYmVyO1xuXG4gICAgY29uc29sZS5sb2coXCJOb21icmUgZGUgZ3JlbmFkZXMgZmxhc2g6XCIsIG5iX3Bvd2VyVVBfdGVhbVBsYXllcjFfMik7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0X3Bvd2VyVVBfZ3JlbmFkZVRlYW1fcGxheWVyKClcbntcblx0bmJfcG93ZXJVUF90ZWFtUGxheWVyMV8yID0gMDtcblx0bmJfcG93ZXJVUF90ZWFtUGxheWVyM180ID0gMDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlX292ZXJsYXkoKSB7XG5cdGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRvdmVybGF5LmlkID0gXCJncmVuYWRlX2ZsYXNoXCI7XG5cdG92ZXJsYXkuaW5uZXJIVE1MID0gYFxuXHRcdDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiLi9zdGF0aWMvanMvY3NzL2dyZW5hZGVfZmxhc2guY3NzXCI+XG5cdFx0PGRpdiBjbGFzcz1cImdyZW5hZGUtZmxhc2hcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJmbGFzaFwiPjwvZGl2PlxuXHRcdDwvZGl2PlxuXHRgO1xuXHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG92ZXJsYXkpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVfb3ZlcmxheSgpIHtcblx0Y29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ3JlbmFkZV9mbGFzaFwiKTtcblx0aWYgKG92ZXJsYXkpIHtcblx0XHRvdmVybGF5LnN0eWxlLm9wYWNpdHkgPSAnMCc7XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRpZiAob3ZlcmxheSAmJiBvdmVybGF5LnBhcmVudE5vZGUpIHtcblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChvdmVybGF5KTtcblx0XHRcdH1cblx0XHR9LCAxMDAwKTtcblx0fVxufVxuXG5sZXQgY2FuVXNlRmxhc2hHcmVuYWRlXzEgPSB0cnVlO1xubGV0IGNhblVzZUZsYXNoR3JlbmFkZV8yID0gdHJ1ZTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdyZW5hZGVfZmxhc2hfVGVhbV9wbGF5ZXIxXzIoKVxue1xuXHRpZiAobmJfcG93ZXJVUF90ZWFtUGxheWVyMV8yID4gMCAmJiBjYW5Vc2VGbGFzaEdyZW5hZGVfMSkge1xuXHRcdGNhblVzZUZsYXNoR3JlbmFkZV8xID0gZmFsc2U7XG5cdFx0XG5cdFx0Y3JlYXRlX292ZXJsYXkoKTtcblx0XHRuYl9wb3dlclVQX3RlYW1QbGF5ZXIxXzItLTtcblx0XHRcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdHJlbW92ZV9vdmVybGF5KCk7XG5cdFx0fSwgMTAwMCk7XG5cdFx0XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRjYW5Vc2VGbGFzaEdyZW5hZGVfMSA9IHRydWU7XG5cdFx0XHRjb25zb2xlLmxvZyhcIkdyZW5hZGUgZmxhc2ggcmVjaGFyZ8OpZSAhXCIpO1xuXHRcdH0sIDE1MDAwKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JlbmFkZV9mbGFzaF9UZWFtX3BsYXllcjNfNCgpXG57XG5cdGlmIChuYl9wb3dlclVQX3RlYW1QbGF5ZXIzXzQgPiAwICYmIGNhblVzZUZsYXNoR3JlbmFkZV8yKSB7XG5cdFx0Y2FuVXNlRmxhc2hHcmVuYWRlXzIgPSBmYWxzZTtcblx0XHRcblx0XHRjcmVhdGVfb3ZlcmxheSgpO1xuXHRcdG5iX3Bvd2VyVVBfdGVhbVBsYXllcjNfNC0tO1xuXHRcdFxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0cmVtb3ZlX292ZXJsYXkoKTtcblx0XHR9LCAxMDAwKTtcblx0XHRcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGNhblVzZUZsYXNoR3JlbmFkZV8yID0gdHJ1ZTtcblx0XHRcdGNvbnNvbGUubG9nKFwiR3JlbmFkZSBmbGFzaCByZWNoYXJnw6llICFcIik7XG5cdFx0fSwgMTUwMDApO1xuXHR9XG59Il19