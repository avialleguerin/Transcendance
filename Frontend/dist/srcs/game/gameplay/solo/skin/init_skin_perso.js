import { player1Skins_multi, player2Skins_multi, player3Skins_multi, player4Skins_multi } from "../../multiplayer/init_skin_perso_multi.js";
import { player1_podium_multi, player2_podium_multi, player3_podium_multi, player4_podium_multi } from "../../multiplayer/init_teamPlayer_podium.js";
import { player1Skins_podium, player2Skins_podium } from "./init_skin_player_podium.js";
import { init_skins_perso_player1_multi_podium, init_skins_perso_player2_multi_podium, init_skins_perso_player3_multi_podium, init_skins_perso_player4_multi_podium } from "../../multiplayer/init_teamPlayer_podium.js";
import { init_skins_perso_first, init_skins_perso_seconde } from "./init_skin_player_podium.js";
import { init_skins_perso_player1_multi, init_skins_perso_player2_multi, init_skins_perso_player3_multi, init_skins_perso_player4_multi } from "../../multiplayer/init_skin_perso_multi.js";
// import { getScene } from "../../babylon.js";
// const scene = getScene();
let currentSkinPlayer1 = 0;
let currentSkinPlayer2 = 0;
let defaultSkinPlayer1 = 0;
let defaultSkinPlayer2 = 0;
const skinPaths = [
    { name: "player_skin_1", path: "/srcs/game/assets/player_skin/", file: "player_blanc.glb" },
    { name: "player_skin_2", path: "/srcs/game/assets/player_skin/", file: "player_bleuv2.glb" },
    { name: "player_skin_3", path: "/srcs/game/assets/player_skin/", file: "player_rougev2.glb" },
    { name: "player_skin_4", path: "/srcs/game/assets/player_skin/", file: "player_vert.glb" }
];
let player1Skins = [];
let player2Skins = [];
function loadSkin(skin, scene) {
    return new Promise((resolve, reject) => {
        BABYLON.SceneLoader.ImportMesh("", skin.path, skin.file, scene, (meshes) => {
            const rootMesh = meshes.find(mesh => mesh.name === "__root__");
            if (rootMesh) {
                rootMesh.position = new BABYLON.Vector3(0, 100, -15);
                rootMesh.scaling = new BABYLON.Vector3(4, 4, 4);
                rootMesh.rotation = new BABYLON.Vector3(0, 0, 0);
                rootMesh.metadata = { isPlayer_skin_menu: true };
                rootMesh.setEnabled(false);
                resolve(rootMesh);
            }
            else {
                reject(`Erreur lors du chargement de ${skin.name}`);
            }
        });
    });
}
function loadSkinsForPlayer(skinPaths, scene, playerSkins, offsetX) {
    let loadPromises = skinPaths.map((skin) => loadSkin(skin, scene));
    Promise.all(loadPromises)
        .then((meshes) => {
        meshes.forEach((mesh, index) => {
            mesh.position.x += offsetX;
            playerSkins.push(mesh);
        });
    })
        .catch((error) => {
        console.error(error);
    });
}
export function init_skins_perso_player1(scene) {
    console.log("init_skins_perso_player1");
    loadSkinsForPlayer(skinPaths, scene, player1Skins, -15);
}
export function init_skins_perso_player2(scene) {
    console.log("init_skins_perso_player2");
    loadSkinsForPlayer(skinPaths, scene, player2Skins, -25);
}
export function enable_skin_perso_player_solo() {
    currentSkinPlayer1 = defaultSkinPlayer1;
    currentSkinPlayer2 = defaultSkinPlayer2;
    if (player1Skins.length === 0) {
        console.log("player1Skins.length === 0");
        return;
    }
    if (player2Skins.length === 0)
        return;
    player1Skins.forEach(skin => skin.setEnabled(false));
    player1Skins[defaultSkinPlayer1].setEnabled(true);
    player2Skins.forEach(skin => skin.setEnabled(false));
    player2Skins[defaultSkinPlayer2].setEnabled(true);
}
export function disable_skin_perso_player_solo() {
    if (player1Skins.length === 0)
        return;
    if (player2Skins.length === 0)
        return;
    player1Skins[currentSkinPlayer1].setEnabled(false);
    currentSkinPlayer1 = defaultSkinPlayer1;
    player2Skins[currentSkinPlayer2].setEnabled(false);
    currentSkinPlayer2 = defaultSkinPlayer2;
}
export function disable_skin_perso_player_solo_and_save() {
    if (player1Skins.length === 0)
        return;
    if (player2Skins.length === 0)
        return;
    player1Skins[currentSkinPlayer1].setEnabled(false);
    player2Skins[currentSkinPlayer2].setEnabled(false);
}
export function switch_skin_perso_player1_right() {
    if (player1Skins.length === 0)
        return;
    // DÃ©sactiver l'ancien skin
    player1Skins[currentSkinPlayer1].setEnabled(false);
    // Changer d'index
    currentSkinPlayer1 = (currentSkinPlayer1 + 1) % player1Skins.length;
    // Activer le nouveau skin
    player1Skins[currentSkinPlayer1].setEnabled(true);
    console.log("currentSkinPlayer1", currentSkinPlayer1);
}
export function switch_skin_perso_player1_left() {
    if (player1Skins.length === 0)
        return;
    player1Skins[currentSkinPlayer1].setEnabled(false);
    currentSkinPlayer1 = (currentSkinPlayer1 - 1 + player1Skins.length) % player1Skins.length;
    player1Skins[currentSkinPlayer1].setEnabled(true);
    console.log("currentSkinPlayer1", currentSkinPlayer1);
}
export function switch_skin_perso_player2_right() {
    if (player2Skins.length === 0)
        return;
    player2Skins[currentSkinPlayer2].setEnabled(false);
    currentSkinPlayer2 = (currentSkinPlayer2 + 1) % player2Skins.length;
    player2Skins[currentSkinPlayer2].setEnabled(true);
    console.log("currentSkinPlayer2", currentSkinPlayer2);
}
export function switch_skin_perso_player2_left() {
    if (player2Skins.length === 0)
        return;
    player2Skins[currentSkinPlayer2].setEnabled(false);
    currentSkinPlayer2 = (currentSkinPlayer2 - 1 + player2Skins.length) % player2Skins.length;
    player2Skins[currentSkinPlayer2].setEnabled(true);
    console.log("currentSkinPlayer2", currentSkinPlayer2);
}
function setEnabledAllByMetadata(scene, metadataKey, enabled) {
    scene.meshes
        .filter(mesh => mesh.metadata && mesh.metadata[metadataKey])
        .forEach(mesh => mesh.setEnabled(enabled));
}
export function destroy_all_by_metadata_skin(scene, metadataKey) {
    if (metadataKey == "isPlayer_skin_menu") {
        player1Skins.length = 0;
        player2Skins.length = 0;
        player1Skins_multi.length = 0;
        player2Skins_multi.length = 0;
        player3Skins_multi.length = 0;
        player4Skins_multi.length = 0;
        setEnabledAllByMetadata(scene, "isPlayer_skin_menu", false);
        scene.meshes
            .filter(mesh => mesh.metadata && mesh.metadata[metadataKey])
            .forEach(mesh => mesh.dispose());
    }
    else if (metadataKey == "isPlayer_skin_podium") {
        player1_podium_multi.length = 0;
        player2_podium_multi.length = 0;
        player3_podium_multi.length = 0;
        player4_podium_multi.length = 0;
        player1Skins_podium.length = 0;
        player2Skins_podium.length = 0;
        setEnabledAllByMetadata(scene, "isPlayer_skin_podium", false);
        scene.meshes
            .filter(mesh => mesh.metadata && mesh.metadata[metadataKey])
            .forEach(mesh => mesh.dispose());
    }
}
export function init_all_skin(scene) {
    init_skins_perso_player1(scene);
    init_skins_perso_player2(scene);
    init_skins_perso_player1_multi(scene);
    init_skins_perso_player2_multi(scene);
    init_skins_perso_player3_multi(scene);
    init_skins_perso_player4_multi(scene);
    init_skins_perso_player1_multi_podium(scene);
    init_skins_perso_player2_multi_podium(scene);
    init_skins_perso_player3_multi_podium(scene);
    init_skins_perso_player4_multi_podium(scene);
    init_skins_perso_first(scene);
    init_skins_perso_seconde(scene);
}
export { currentSkinPlayer1, currentSkinPlayer2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdF9za2luX3BlcnNvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHVibGljL3NyY3MvZ2FtZS9nYW1lcGxheS9zb2xvL3NraW4vaW5pdF9za2luX3BlcnNvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzVJLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3JKLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hGLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxxQ0FBcUMsRUFBRSxxQ0FBcUMsRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3pOLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2hHLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSw4QkFBOEIsRUFBRSw4QkFBOEIsRUFBRSw4QkFBOEIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBRTVMLCtDQUErQztBQUMvQyw0QkFBNEI7QUFDNUIsSUFBSSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7QUFDM0IsSUFBSSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7QUFDM0IsSUFBSSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7QUFDM0IsSUFBSSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7QUFFM0IsTUFBTSxTQUFTLEdBQUc7SUFDZCxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLGdDQUFnQyxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRTtJQUMzRixFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLGdD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O1FBQy9CLG1CQUFtQixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFL0IsdUJBQXVCLENBQUMsS0FBSyxFQUFFLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzlELEtBQUssQ0FBQyxNQUFNO2FBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQzNELE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxLQUFLO0lBRS9CLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLDhCQUE4QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLDhCQUE4QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLDhCQUE4QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLDhCQUE4QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXRDLHFDQUFxQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdDLHFDQUFxQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdDLHFDQUFxQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdDLHFDQUFxQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTdDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFHRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBsYXllcjFTa2luc19tdWx0aSwgcGxheWVyMlNraW5zX211bHRpLCBwbGF5ZXIzU2tpbnNfbXVsdGksIHBsYXllcjRTa2luc19tdWx0aSB9IGZyb20gXCIuLi8uLi9tdWx0aXBsYXllci9pbml0X3NraW5fcGVyc29fbXVsdGkuanNcIjtcbmltcG9ydCB7IHBsYXllcjFfcG9kaXVtX211bHRpLCBwbGF5ZXIyX3BvZGl1bV9tdWx0aSwgcGxheWVyM19wb2RpdW1fbXVsdGksIHBsYXllcjRfcG9kaXVtX211bHRpIH0gZnJvbSBcIi4uLy4uL211bHRpcGxheWVyL2luaXRfdGVhbVBsYXllcl9wb2RpdW0uanNcIjtcbmltcG9ydCB7IHBsYXllcjFTa2luc19wb2RpdW0sIHBsYXllcjJTa2luc19wb2RpdW0gfSBmcm9tIFwiLi9pbml0X3NraW5fcGxheWVyX3BvZGl1bS5qc1wiO1xuaW1wb3J0IHsgaW5pdF9za2luc19wZXJzb19wbGF5ZXIxX211bHRpX3BvZGl1bSwgaW5pdF9za2luc19wZXJzb19wbGF5ZXIyX211bHRpX3BvZGl1bSwgaW5pdF9za2luc19wZXJzb19wbGF5ZXIzX211bHRpX3BvZGl1bSwgaW5pdF9za2luc19wZXJzb19wbGF5ZXI0X211bHRpX3BvZGl1bSB9IGZyb20gXCIuLi8uLi9tdWx0aXBsYXllci9pbml0X3RlYW1QbGF5ZXJfcG9kaXVtLmpzXCI7XG5pbXBvcnQgeyBpbml0X3NraW5zX3BlcnNvX2ZpcnN0LCBpbml0X3NraW5zX3BlcnNvX3NlY29uZGUgfSBmcm9tIFwiLi9pbml0X3NraW5fcGxheWVyX3BvZGl1bS5qc1wiO1xuaW1wb3J0IHsgaW5pdF9za2luc19wZXJzb19wbGF5ZXIxX211bHRpLCBpbml0X3NraW5zX3BlcnNvX3BsYXllcjJfbXVsdGksIGluaXRfc2tpbnNfcGVyc29fcGxheWVyM19tdWx0aSwgaW5pdF9za2luc19wZXJzb19wbGF5ZXI0X211bHRpIH0gZnJvbSBcIi4uLy4uL211bHRpcGxheWVyL2luaXRfc2tpbl9wZXJzb19tdWx0aS5qc1wiO1xuXG4vLyBpbXBvcnQgeyBnZXRTY2VuZSB9IGZyb20gXCIuLi8uLi9iYWJ5bG9uLmpzXCI7XG4vLyBjb25zdCBzY2VuZSA9IGdldFNjZW5lKCk7XG5sZXQgY3VycmVudFNraW5QbGF5ZXIxID0gMDtcbmxldCBjdXJyZW50U2tpblBsYXllcjIgPSAwO1xubGV0IGRlZmF1bHRTa2luUGxheWVyMSA9IDA7XG5sZXQgZGVmYXVsdFNraW5QbGF5ZXIyID0gMDtcblxuY29uc3Qgc2tpblBhdGhzID0gW1xuICAgIHsgbmFtZTogXCJwbGF5ZXJfc2tpbl8xXCIsIHBhdGg6IFwiL3NyY3MvZ2FtZS9hc3NldHMvcGxheWVyX3NraW4vXCIsIGZpbGU6IFwicGxheWVyX2JsYW5jLmdsYlwiIH0sXG4gICAgeyBuYW1lOiBcInBsYXllcl9za2luXzJcIiwgcGF0aDogXCIvc3Jjcy9nYW1lL2Fzc2V0cy9wbGF5ZXJfc2tpbi9cIiwgZmlsZTogXCJwbGF5ZXJfYmxldXYyLmdsYlwiIH0sXG4gICAgeyBuYW1lOiBcInBsYXllcl9za2luXzNcIiwgcGF0aDogXCIvc3Jjcy9nYW1lL2Fzc2V0cy9wbGF5ZXJfc2tpbi9cIiwgZmlsZTogXCJwbGF5ZXJfcm91Z2V2Mi5nbGJcIiB9LFxuICAgIHsgbmFtZTogXCJwbGF5ZXJfc2tpbl80XCIsIHBhdGg6IFwiL3NyY3MvZ2FtZS9hc3NldHMvcGxheWVyX3NraW4vXCIsIGZpbGU6IFwicGxheWVyX3ZlcnQuZ2xiXCIgfVxuXTtcblxubGV0IHBsYXllcjFTa2lucyA9IFtdO1xubGV0IHBsYXllcjJTa2lucyA9IFtdO1xuXG5mdW5jdGlvbiBsb2FkU2tpbihza2luLCBzY2VuZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIEJBQllMT04uU2NlbmVMb2FkZXIuSW1wb3J0TWVzaChcIlwiLCBza2luLnBhdGgsIHNraW4uZmlsZSwgc2NlbmUsIChtZXNoZXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJvb3RNZXNoID0gbWVzaGVzLmZpbmQobWVzaCA9PiBtZXNoLm5hbWUgPT09IFwiX19yb290X19cIik7XG4gICAgICAgICAgICBpZiAocm9vdE1lc2gpIHtcbiAgICAgICAgICAgICAgICByb290TWVzaC5wb3NpdGlvbiA9IG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwgMTAwLCAtMTUpO1xuICAgICAgICAgICAgICAgIHJvb3RNZXNoLnNjYWxpbmcgPSBuZXcgQkFCWUxPTi5WZWN0b3IzKDQsIDQsIDQpO1xuICAgICAgICAgICAgICAgIHJvb3RNZXNoLnJvdGF0aW9uID0gbmV3IEJBQllMT04uVmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICByb290TWVzaC5tZXRhZGF0YSA9IHsgaXNQbGF5ZXJfc2tpbl9tZW51OiB0cnVlIH07XG5cbiAgICAgICAgICAgICAgICByb290TWVzaC5zZXRFbmFibGVkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJvb3RNZXNoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGBFcnJldXIgbG9ycyBkdSBjaGFyZ2VtZW50IGRlICR7c2tpbi5uYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbG9hZFNraW5zRm9yUGxheWVyKHNraW5QYXRocywgc2NlbmUsIHBsYXllclNraW5zLCBvZmZzZXRYKVxue1xuICAgIGxldCBsb2FkUHJvbWlzZXMgPSBza2luUGF0aHMubWFwKChza2luKSA9PiBsb2FkU2tpbihza2luLCBzY2VuZSkpO1xuXG4gICAgUHJvbWlzZS5hbGwobG9hZFByb21pc2VzKVxuICAgICAgICAudGhlbigobWVzaGVzKSA9PiB7XG4gICAgICAgICAgICBtZXNoZXMuZm9yRWFjaCgobWVzaCwgaW5kZXgpID0+XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbWVzaC5wb3NpdGlvbi54ICs9IG9mZnNldFg7XG4gICAgICAgICAgICAgICAgcGxheWVyU2tpbnMucHVzaChtZXNoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0X3NraW5zX3BlcnNvX3BsYXllcjEoc2NlbmUpXG57XG4gICAgY29uc29sZS5sb2coXCJpbml0X3NraW5zX3BlcnNvX3BsYXllcjFcIik7XG4gICAgbG9hZFNraW5zRm9yUGxheWVyKHNraW5QYXRocywgc2NlbmUsIHBsYXllcjFTa2lucywgLTE1KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRfc2tpbnNfcGVyc29fcGxheWVyMihzY2VuZSlcbntcbiAgICBjb25zb2xlLmxvZyhcImluaXRfc2tpbnNfcGVyc29fcGxheWVyMlwiKTtcbiAgICBsb2FkU2tpbnNGb3JQbGF5ZXIoc2tpblBhdGhzLCBzY2VuZSwgcGxheWVyMlNraW5zLCAtMjUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlX3NraW5fcGVyc29fcGxheWVyX3NvbG8oKVxue1xuICAgIGN1cnJlbnRTa2luUGxheWVyMSA9IGRlZmF1bHRTa2luUGxheWVyMTtcbiAgICBjdXJyZW50U2tpblBsYXllcjIgPSBkZWZhdWx0U2tpblBsYXllcjI7XG5cbiAgICBpZiAocGxheWVyMVNraW5zLmxlbmd0aCA9PT0gMClcbiAgICB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicGxheWVyMVNraW5zLmxlbmd0aCA9PT0gMFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwbGF5ZXIyU2tpbnMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cblxuICAgIHBsYXllcjFTa2lucy5mb3JFYWNoKHNraW4gPT4gc2tpbi5zZXRFbmFibGVkKGZhbHNlKSk7XG5cdHBsYXllcjFTa2luc1tkZWZhdWx0U2tpblBsYXllcjFdLnNldEVuYWJsZWQodHJ1ZSk7XG5cbiAgICBwbGF5ZXIyU2tpbnMuZm9yRWFjaChza2luID0+IHNraW4uc2V0RW5hYmxlZChmYWxzZSkpO1xuICAgIHBsYXllcjJTa2luc1tkZWZhdWx0U2tpblBsYXllcjJdLnNldEVuYWJsZWQodHJ1ZSk7XG5cblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZV9za2luX3BlcnNvX3BsYXllcl9zb2xvKClcbntcbiAgICBpZiAocGxheWVyMVNraW5zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmIChwbGF5ZXIyU2tpbnMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBwbGF5ZXIxU2tpbnNbY3VycmVudFNraW5QbGF5ZXIxXS5zZXRFbmFibGVkKGZhbHNlKTtcblx0Y3VycmVudFNraW5QbGF5ZXIxID0gZGVmYXVsdFNraW5QbGF5ZXIxO1xuXG4gICAgcGxheWVyMlNraW5zW2N1cnJlbnRTa2luUGxheWVyMl0uc2V0RW5hYmxlZChmYWxzZSk7XG5cdGN1cnJlbnRTa2luUGxheWVyMiA9IGRlZmF1bHRTa2luUGxheWVyMjtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZV9za2luX3BlcnNvX3BsYXllcl9zb2xvX2FuZF9zYXZlKClcbntcbiAgICBpZiAocGxheWVyMVNraW5zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmIChwbGF5ZXIyU2tpbnMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBwbGF5ZXIxU2tpbnNbY3VycmVudFNraW5QbGF5ZXIxXS5zZXRFbmFibGVkKGZhbHNlKTtcbiAgICBwbGF5ZXIyU2tpbnNbY3VycmVudFNraW5QbGF5ZXIyXS5zZXRFbmFibGVkKGZhbHNlKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gc3dpdGNoX3NraW5fcGVyc29fcGxheWVyMV9yaWdodCgpIHtcbiAgICBpZiAocGxheWVyMVNraW5zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgLy8gRMOpc2FjdGl2ZXIgbCdhbmNpZW4gc2tpblxuICAgIHBsYXllcjFTa2luc1tjdXJyZW50U2tpblBsYXllcjFdLnNldEVuYWJsZWQoZmFsc2UpO1xuXG4gICAgLy8gQ2hhbmdlciBkJ2luZGV4XG4gICAgY3VycmVudFNraW5QbGF5ZXIxID0gKGN1cnJlbnRTa2luUGxheWVyMSArIDEpICUgcGxheWVyMVNraW5zLmxlbmd0aDtcblxuICAgIC8vIEFjdGl2ZXIgbGUgbm91dmVhdSBza2luXG4gICAgcGxheWVyMVNraW5zW2N1cnJlbnRTa2luUGxheWVyMV0uc2V0RW5hYmxlZCh0cnVlKTtcblx0Y29uc29sZS5sb2coXCJjdXJyZW50U2tpblBsYXllcjFcIiwgY3VycmVudFNraW5QbGF5ZXIxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN3aXRjaF9za2luX3BlcnNvX3BsYXllcjFfbGVmdCgpIHtcbiAgICBpZiAocGxheWVyMVNraW5zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgcGxheWVyMVNraW5zW2N1cnJlbnRTa2luUGxheWVyMV0uc2V0RW5hYmxlZChmYWxzZSk7XG4gICAgY3VycmVudFNraW5QbGF5ZXIxID0gKGN1cnJlbnRTa2luUGxheWVyMSAtIDEgKyBwbGF5ZXIxU2tpbnMubGVuZ3RoKSAlIHBsYXllcjFTa2lucy5sZW5ndGg7XG4gICAgcGxheWVyMVNraW5zW2N1cnJlbnRTa2luUGxheWVyMV0uc2V0RW5hYmxlZCh0cnVlKTtcblx0Y29uc29sZS5sb2coXCJjdXJyZW50U2tpblBsYXllcjFcIiwgY3VycmVudFNraW5QbGF5ZXIxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN3aXRjaF9za2luX3BlcnNvX3BsYXllcjJfcmlnaHQoKSB7XG4gICAgaWYgKHBsYXllcjJTa2lucy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIHBsYXllcjJTa2luc1tjdXJyZW50U2tpblBsYXllcjJdLnNldEVuYWJsZWQoZmFsc2UpO1xuICAgIGN1cnJlbnRTa2luUGxheWVyMiA9IChjdXJyZW50U2tpblBsYXllcjIgKyAxKSAlIHBsYXllcjJTa2lucy5sZW5ndGg7XG4gICAgcGxheWVyMlNraW5zW2N1cnJlbnRTa2luUGxheWVyMl0uc2V0RW5hYmxlZCh0cnVlKTtcblx0Y29uc29sZS5sb2coXCJjdXJyZW50U2tpblBsYXllcjJcIiwgY3VycmVudFNraW5QbGF5ZXIyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN3aXRjaF9za2luX3BlcnNvX3BsYXllcjJfbGVmdCgpIHtcbiAgICBpZiAocGxheWVyMlNraW5zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgcGxheWVyMlNraW5zW2N1cnJlbnRTa2luUGxheWVyMl0uc2V0RW5hYmxlZChmYWxzZSk7XG4gICAgY3VycmVudFNraW5QbGF5ZXIyID0gKGN1cnJlbnRTa2luUGxheWVyMiAtIDEgKyBwbGF5ZXIyU2tpbnMubGVuZ3RoKSAlIHBsYXllcjJTa2lucy5sZW5ndGg7XG4gICAgcGxheWVyMlNraW5zW2N1cnJlbnRTa2luUGxheWVyMl0uc2V0RW5hYmxlZCh0cnVlKTtcblxuXHRjb25zb2xlLmxvZyhcImN1cnJlbnRTa2luUGxheWVyMlwiLCBjdXJyZW50U2tpblBsYXllcjIpO1xufVxuXG5mdW5jdGlvbiBzZXRFbmFibGVkQWxsQnlNZXRhZGF0YShzY2VuZSwgbWV0YWRhdGFLZXksIGVuYWJsZWQpIHtcbiAgICBzY2VuZS5tZXNoZXNcbiAgICAgICAgLmZpbHRlcihtZXNoID0+IG1lc2gubWV0YWRhdGEgJiYgbWVzaC5tZXRhZGF0YVttZXRhZGF0YUtleV0pXG4gICAgICAgIC5mb3JFYWNoKG1lc2ggPT4gbWVzaC5zZXRFbmFibGVkKGVuYWJsZWQpKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveV9hbGxfYnlfbWV0YWRhdGFfc2tpbihzY2VuZSwgbWV0YWRhdGFLZXkpIHtcblxuICAgIGlmIChtZXRhZGF0YUtleSA9PSBcImlzUGxheWVyX3NraW5fbWVudVwiKVxuICAgIHtcbiAgICAgICAgcGxheWVyMVNraW5zLmxlbmd0aCA9IDA7XG4gICAgICAgIHBsYXllcjJTa2lucy5sZW5ndGggPSAwO1xuICAgICAgICBwbGF5ZXIxU2tpbnNfbXVsdGkubGVuZ3RoID0gMDtcbiAgICAgICAgcGxheWVyMlNraW5zX211bHRpLmxlbmd0aCA9IDA7XG4gICAgICAgIHBsYXllcjNTa2luc19tdWx0aS5sZW5ndGggPSAwO1xuICAgICAgICBwbGF5ZXI0U2tpbnNfbXVsdGkubGVuZ3RoID0gMDtcbiAgICAgICAgc2V0RW5hYmxlZEFsbEJ5TWV0YWRhdGEoc2NlbmUsIFwiaXNQbGF5ZXJfc2tpbl9tZW51XCIsIGZhbHNlKTtcbiAgICAgICAgc2NlbmUubWVzaGVzXG4gICAgICAgICAgICAuZmlsdGVyKG1lc2ggPT4gbWVzaC5tZXRhZGF0YSAmJiBtZXNoLm1ldGFkYXRhW21ldGFkYXRhS2V5XSlcbiAgICAgICAgICAgIC5mb3JFYWNoKG1lc2ggPT4gbWVzaC5kaXNwb3NlKCkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChtZXRhZGF0YUtleSA9PSBcImlzUGxheWVyX3NraW5fcG9kaXVtXCIpXG4gICAge1xuICAgICAgICBwbGF5ZXIxX3BvZGl1bV9tdWx0aS5sZW5ndGggPSAwO1xuICAgICAgICBwbGF5ZXIyX3BvZGl1bV9tdWx0aS5sZW5ndGggPSAwO1xuICAgICAgICBwbGF5ZXIzX3BvZGl1bV9tdWx0aS5sZW5ndGggPSAwO1xuICAgICAgICBwbGF5ZXI0X3BvZGl1bV9tdWx0aS5sZW5ndGggPSAwO1xuICAgICAgICBwbGF5ZXIxU2tpbnNfcG9kaXVtLmxlbmd0aCA9IDA7XG4gICAgICAgIHBsYXllcjJTa2luc19wb2RpdW0ubGVuZ3RoID0gMDtcblxuICAgICAgICBzZXRFbmFibGVkQWxsQnlNZXRhZGF0YShzY2VuZSwgXCJpc1BsYXllcl9za2luX3BvZGl1bVwiLCBmYWxzZSk7XG4gICAgICAgIHNjZW5lLm1lc2hlc1xuICAgICAgICAgICAgLmZpbHRlcihtZXNoID0+IG1lc2gubWV0YWRhdGEgJiYgbWVzaC5tZXRhZGF0YVttZXRhZGF0YUtleV0pXG4gICAgICAgICAgICAuZm9yRWFjaChtZXNoID0+IG1lc2guZGlzcG9zZSgpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0X2FsbF9za2luKHNjZW5lKVxue1xuICAgIGluaXRfc2tpbnNfcGVyc29fcGxheWVyMShzY2VuZSk7XG4gICAgaW5pdF9za2luc19wZXJzb19wbGF5ZXIyKHNjZW5lKTtcbiAgICBpbml0X3NraW5zX3BlcnNvX3BsYXllcjFfbXVsdGkoc2NlbmUpO1xuICAgIGluaXRfc2tpbnNfcGVyc29fcGxheWVyMl9tdWx0aShzY2VuZSk7XG4gICAgaW5pdF9za2luc19wZXJzb19wbGF5ZXIzX211bHRpKHNjZW5lKTtcbiAgICBpbml0X3NraW5zX3BlcnNvX3BsYXllcjRfbXVsdGkoc2NlbmUpO1xuXG4gICAgaW5pdF9za2luc19wZXJzb19wbGF5ZXIxX211bHRpX3BvZGl1bShzY2VuZSk7XG4gICAgaW5pdF9za2luc19wZXJzb19wbGF5ZXIyX211bHRpX3BvZGl1bShzY2VuZSk7XG4gICAgaW5pdF9za2luc19wZXJzb19wbGF5ZXIzX211bHRpX3BvZGl1bShzY2VuZSk7XG4gICAgaW5pdF9za2luc19wZXJzb19wbGF5ZXI0X211bHRpX3BvZGl1bShzY2VuZSk7XG5cbiAgICBpbml0X3NraW5zX3BlcnNvX2ZpcnN0KHNjZW5lKTtcbiAgICBpbml0X3NraW5zX3BlcnNvX3NlY29uZGUoc2NlbmUpO1xufVxuXG5cbmV4cG9ydCB7IGN1cnJlbnRTa2luUGxheWVyMSwgY3VycmVudFNraW5QbGF5ZXIyIH07Il19