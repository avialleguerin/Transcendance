import { c } from './constants.js';
export default class Sprite {
    constructor({ position, Image_src, scaleX = 1, scaleY = 1 }) {
        this.position = position;
        this.scaleX = scaleX;
        this.scaleY = scaleY;
        this.image = new Image();
        this.loaded = false;
        this.width = 0; // Initialisation
        this.height = 0; // Initialisation
        // Attendre que l'image soit chargée avant de dessiner
        this.image.onload = () => {
            this.loaded = true;
            this.width = this.image.width * this.scaleX; // Calcul de la largeur
            this.height = this.image.height * this.scaleY; // Calcul de la hauteur
        };
        this.image.onerror = () => {
            console.error("Failed to load image:", Image_src);
        };
        // Définir la source après avoir configuré les gestionnaires d'événements
        this.image.src = Image_src;
    }
    draw() {
        if (!this.loaded)
            return;
        c.save();
        if (this.scaleX < 0) {
            // On inverse horizontalement
            c.translate(this.position.x + this.width, this.position.y);
            c.scale(-1, 1);
        }
        else {
            c.translate(this.position.x, this.position.y);
            c.scale(1, 1);
        }
        // On dessine à (0, 0) car on a déjà déplacé le contexte
        c.drawImage(this.image, 0, 0, this.width, this.height);
        c.restore();
    }
    update() {
        this.draw();
    }
    logStatus() {
        console.log("Image loaded status:", this.loaded);
        console.log("Image path:", this.image.src);
        console.log("Image dimensions:", this.width, this.height);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3ByaXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHVibGljL3N0YXRpYy9qcy92aWV3cy9wbGF0Zm9ybWVyL1Nwcml0ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkMsTUFBTSxDQUFDLE9BQU8sT0FBTyxNQUFNO0lBQ3ZCLFlBQVksRUFBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBQztRQUNyRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBRSxpQkFBaUI7UUFDbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxpQkFBaUI7UUFFbEMsc0RBQXNEO1FBQ3RELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtZQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBRSx1QkFBdUI7WUFDckUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsdUJBQXVCO1FBRTFFLENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRTtZQUN0QixPQUFPLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQztRQUVGLHlFQUF5RTtRQUN6RSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQUk7UUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07WUFBRSxPQUFPO1FBRXpCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVULElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNsQiw2QkFBNkI7WUFDN0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0QsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuQixDQUFDO2FBQU0sQ0FBQztZQUNKLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsQixDQUFDO1FBRUQsd0RBQXdEO1FBQ3hELENBQUMsQ0FBQyxTQUFTLENBQ1AsSUFBSSxDQUFDLEtBQUssRUFDVixDQUFDLEVBQ0QsQ0FBQyxFQUNELElBQUksQ0FBQyxLQUFLLEVBQ1YsSUFBSSxDQUFDLE1BQU0sQ0FDZCxDQUFDO1FBRUYsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxTQUFTO1FBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlELENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGMgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwcml0ZSB7XG4gICAgY29uc3RydWN0b3Ioe3Bvc2l0aW9uLCBJbWFnZV9zcmMsIHNjYWxlWCA9IDEsIHNjYWxlWSA9IDF9KSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgICAgdGhpcy5zY2FsZVggPSBzY2FsZVg7XG4gICAgICAgIHRoaXMuc2NhbGVZID0gc2NhbGVZO1xuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMud2lkdGggPSAwOyAgLy8gSW5pdGlhbGlzYXRpb25cbiAgICAgICAgdGhpcy5oZWlnaHQgPSAwOyAvLyBJbml0aWFsaXNhdGlvblxuICAgICAgICBcbiAgICAgICAgLy8gQXR0ZW5kcmUgcXVlIGwnaW1hZ2Ugc29pdCBjaGFyZ8OpZSBhdmFudCBkZSBkZXNzaW5lclxuICAgICAgICB0aGlzLmltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmltYWdlLndpZHRoICogdGhpcy5zY2FsZVg7ICAvLyBDYWxjdWwgZGUgbGEgbGFyZ2V1clxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmltYWdlLmhlaWdodCAqIHRoaXMuc2NhbGVZOyAvLyBDYWxjdWwgZGUgbGEgaGF1dGV1clxuXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB0aGlzLmltYWdlLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGxvYWQgaW1hZ2U6XCIsIEltYWdlX3NyYyk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyBEw6lmaW5pciBsYSBzb3VyY2UgYXByw6hzIGF2b2lyIGNvbmZpZ3Vyw6kgbGVzIGdlc3Rpb25uYWlyZXMgZCfDqXbDqW5lbWVudHNcbiAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBJbWFnZV9zcmM7XG4gICAgfVxuXG4gICAgZHJhdygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxvYWRlZCkgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgYy5zYXZlKCk7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5zY2FsZVggPCAwKSB7XG4gICAgICAgICAgICAvLyBPbiBpbnZlcnNlIGhvcml6b250YWxlbWVudFxuICAgICAgICAgICAgYy50cmFuc2xhdGUodGhpcy5wb3NpdGlvbi54ICsgdGhpcy53aWR0aCwgdGhpcy5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgIGMuc2NhbGUoLTEsIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYy50cmFuc2xhdGUodGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgYy5zY2FsZSgxLCAxKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBPbiBkZXNzaW5lIMOgICgwLCAwKSBjYXIgb24gYSBkw6lqw6AgZMOpcGxhY8OpIGxlIGNvbnRleHRlXG4gICAgICAgIGMuZHJhd0ltYWdlKFxuICAgICAgICAgICAgdGhpcy5pbWFnZSxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgdGhpcy53aWR0aCxcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0XG4gICAgICAgICk7XG4gICAgXG4gICAgICAgIGMucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgfVxuXG4gICAgbG9nU3RhdHVzKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkltYWdlIGxvYWRlZCBzdGF0dXM6XCIsIHRoaXMubG9hZGVkKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJJbWFnZSBwYXRoOlwiLCB0aGlzLmltYWdlLnNyYyk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiSW1hZ2UgZGltZW5zaW9uczpcIiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgIH1cbn0iXX0=