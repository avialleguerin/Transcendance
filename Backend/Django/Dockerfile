# backend/django/Dockerfile

# 1Ô∏è‚É£ Utilisation d'une image officielle Python l√©g√®re
# Use 3.9 if it's not functionnal
FROM python:3.11-slim

# 2Ô∏è‚É£ √âvite la mise en tampon des logs Python pour un affichage imm√©diat
ENV PYTHONUNBUFFERED=1

# 3Ô∏è‚É£ D√©finit le dossier de travail √† /app
WORKDIR /app

# 4Ô∏è‚É£ Copie les d√©pendances Python avant l'installation
COPY requirements.txt .

# ‚úÖ Pourquoi ?

# On copie uniquement requirements.txt avant d‚Äôinstaller les d√©pendances.
# Cela permet d'utiliser le cache Docker :
# Si requirements.txt ne change pas, Docker ne r√©installe pas les d√©pendances.
# Gain de temps au build üöÄ.

# 5Ô∏è‚É£ Installe les d√©pendances Python sans garder de cache pour alleger le Docker
RUN pip install --no-cache-dir -r requirements.txt

# üîß Am√©lioration possible :
# Si besoin de PostgreSQL ou MySQL, ajoute ces d√©pendances avant l'installation de pip :
# RUN apt-get update && apt-get install -y libpq-dev gcc && rm -rf /var/lib/apt/lists/*

# 6Ô∏è‚É£ Copie tout le projet Django dans le conteneur
COPY . .

# ‚úÖ Pourquoi ?

# Copie tous les fichiers du backend dans /app.
# √Ä faire apr√®s l‚Äôinstallation des d√©pendances pour gagner du temps gr√¢ce au cache Docker.

# ‚ö†Ô∏è Attention !
# √âvite de copier les fichiers inutiles (ex: .git, __pycache__, venv).

# 7Ô∏è‚É£ Lancement de Gunicorn pour servir Django
CMD ["gunicorn", "transcendence.wsgi:application", "--bind", "0.0.0.0:8000"]

# ‚úÖ Pourquoi ?

# gunicorn est un serveur WSGI performant, bien adapt√© √† la production.
# --bind 0.0.0.0:8000 :
# Accepte les requ√™tes venant de n'importe quelle adresse IP.
# Important pour fonctionner dans un conteneur Docker.